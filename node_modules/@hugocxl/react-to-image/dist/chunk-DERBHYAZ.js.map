{"version":3,"sources":["../src/hooks/types.ts"],"names":["init_cjs_shims","HookStateStatus"],"mappings":"wCAAAA,IA8CO,IAAKC,OACVA,EAAA,KAAO,OACPA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,MAAQ,QAJEA,OAAA","sourcesContent":["import type { LibFn, LibFnReturn } from '../types'\n\n/**\n * Options for the hook\n */\nexport type HookOptions<F extends LibFn> = Parameters<F>[1] & {\n  selector?: Parameters<typeof document.querySelector>[0]\n  /**\n   * This function will fire before the conversion starts\n   */\n  onStart?: () => unknown\n  /**\n   * This function will fire when the conversion is being processed\n   */\n  onLoading?: () => unknown\n  /**\n   * This function will fire if the conversion encounters an error and will be passed the error\n   */\n  onError?: (error: string) => unknown\n  /**\n   * This function will fire when the conversion is successful and will be passed the conversion's result\n   */\n  onSuccess?: (data: LibFnReturn<F>) => unknown\n}\n\n/**\n * Return type of the hook\n */\nexport type HookReturn<F extends LibFn, E = unknown> = [\n  /**\n   * State of the hook\n   */\n  HookExtendedState<LibFnReturn<F>>,\n  /**\n   * Function to start the conversion\n   */\n  () => void,\n  /**\n   * Function to set the ref for the hook\n   */\n  (domNode: E) => void\n]\n\n/**\n * Status of the hook state\n */\nexport enum HookStateStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Success = 'success',\n  Error = 'error'\n}\n\n/**\n * State of the hook\n */\nexport type HookState<D> = {\n  /**\n   * Current status of the conversion\n   */\n  status: HookStateStatus\n  /**\n   * Error message if an error occurred\n   */\n  error: string | null\n  /**\n   * The last successfully resolved data for the conversion\n   */\n  data: D | null\n}\n\n/**\n * Derived state of the hook\n */\nexport type HookDerivedState = {\n  /**\n   * Flag indicating if the hook is idle\n   */\n  isIdle: boolean\n  /**\n   * Flag indicating if the hook is loading\n   */\n  isLoading: boolean\n  /**\n   * Flag indicating if an error occurred\n   */\n  isError: boolean\n  /**\n   * Flag indicating if the hook was successful\n   */\n  isSuccess: boolean\n}\n\n/**\n * Extended state of the hook\n */\nexport type HookExtendedState<D> = HookState<D> & HookDerivedState\n\n/**\n * Action to update the hook state\n */\nexport type HookStateAction<F extends LibFn> =\n  | { type: HookStateStatus.Loading }\n  | { type: HookStateStatus.Success; data: LibFnReturn<F> }\n  | { type: HookStateStatus.Error; error: string }\n\nexport type HookStateReducer<F extends LibFn> = (\n  state: HookState<LibFnReturn<F>>,\n  action: HookStateAction<F>\n) => HookState<LibFnReturn<F>>\n\nexport type Hook<F extends LibFn> = <E = unknown>(\n  options?: HookOptions<F>\n) => HookReturn<F, E>\n"]}